# Initial data
brick_thickness = [250, 380, 520, 630]
aerated_concrete_thickness = [200, 300, 375] 
hempcrete_thickness = [200, 300, 400, 500] 
insulator_thickness = [50, 100, 120, 150, 200]
# Physical-mechanical and economical values: density kg/m3; thermal_conductivity coefficient W/m*K; cost UAH/m3, thickness in mm
brick = {"density": 1400, "thermal_conductivity":0.58, "cost":3830, "thickness":[250, 380, 520, 630]} 
aerated_concrete = {"density": 300, "thermal_conductivity":0.08, "cost":3300, "thickness":[200, 300, 375]}
hempcrete = {"density": 350, "thermal_conductivity":0.08, "cost":4500, "thickness":[200, 300, 400, 500]}
insulator_rockwool = {"density": 120, "thermal_conductivity":0.064, "cost":1668, "thickness":[50, 100, 120, 150, 200]}
insulator_EPS = {"density": 35, "thermal_conductivity":0.045, "cost":3800,"thickness":[50, 100, 120, 150, 200]}

# Assemblies combination with insulators:
brick_rockwool = [{"brick_thickness":brick,"insulator_rockwool_thickness":insulator}for brick in brick["thickness"] for insulator in insulator_rockwool["thickness"]]
brick_EPS = [{"brick_thickness":brick,"insulator_EPS_thickness":insulator} for brick in brick["thickness"] for insulator in insulator_EPS["thickness"]]

aerated_concrete_rockwool = [{"aerated_concrete_thickness":brick,"insulator_rockwool_thickness":insulator}for brick in aerated_concrete["thickness"] for insulator in insulator_rockwool["thickness"]]
aerated_concrete_EPS = [{"aerated_concrete_thickness":brick,"insulator_EPS_thickness":insulator} for brick in aerated_concrete["thickness"] for insulator in insulator_EPS["thickness"]]

hempcrete_rockwool = [{"hempcrete_thickness":brick,"insulator_rockwool_thickness":insulator} for brick in hempcrete["thickness"] for insulator in insulator_rockwool["thickness"]]
hempcrete_EPS = [{"hempcrete_thickness":brick,"insulator_EPS_thickness":insulator} for brick in hempcrete["thickness"] for insulator in insulator_EPS["thickness"]]


# Obtaining the list of materials that meet the requierements of thermal resistance (R-value) without insulator layer:
brick_meet = []
for thickness in brick["thickness"]:
    if 1/23+ 1/8.7 + thickness*10**-3/brick["thermal_conductivity"] >= 3.3:
        brick_meet.append(thickness)
    else:
        print(False)

aerated_concrete_meet = []
for thickness in aerated_concrete["thickness"]:
    if 1/23+ 1/8.7 + thickness*10**-3/aerated_concrete["thermal_conductivity"] >= 3.3:
        aerated_concrete_meet.append(thickness)
    else:
        print(False)

hempcrete_meet = []
for thickness in hempcrete["thickness"]:
    if 1/23+ 1/8.7 + thickness*10**-3/hempcrete["thermal_conductivity"] >= 3.3:
        hempcrete_meet.append(thickness)
    else:
        print(False)
        
print("For brick the thicknesses that meet R-reqiurements are:", brick_meet)
print("For aerated_concrete the thicknesses that meet R-reqiurements are:",aerated_concrete_meet)        
print("For hempcrete the thicknesses that meet R-reqiurements are:",hempcrete_meet)

# Obtaining the R-value (thermal resistance value), mass and cost values for all aasemblies:
for index, element in enumerate(brick_rockwool):
    brick_rockwool[index]['R-value'] = round(1/23+ 1/8.7 + element["brick_thickness"]*10**-3/brick["thermal_conductivity"] + element["insulator_rockwool_thickness"]*10**-3/insulator_rockwool["thermal_conductivity"], 2)
    brick_rockwool[index]['mass'] = round(element["brick_thickness"]*10**-3*brick["density"] + element["insulator_rockwool_thickness"]*10**-3*insulator_rockwool["density"], 2)
    brick_rockwool[index]['cost'] = round(element["brick_thickness"]*10**-3*brick["cost"] + element["insulator_rockwool_thickness"]*10**-3*insulator_rockwool["cost"], 2)

for index, element in enumerate(brick_EPS):
    brick_EPS[index]['R-value'] = round(1/23+ 1/8.7 + element["brick_thickness"]*10**-3/brick["thermal_conductivity"] + element["insulator_EPS_thickness"]*10**-3/insulator_EPS["thermal_conductivity"], 2)
    brick_EPS[index]['mass'] = round(element["brick_thickness"]*10**-3*brick["density"] + element["insulator_EPS_thickness"]*10**-3*insulator_EPS["density"], 2)
    brick_EPS[index]['cost'] = round(element["brick_thickness"]*10**-3*brick["cost"] + element["insulator_EPS_thickness"]*10**-3*insulator_EPS["cost"], 2)

for index, element in enumerate(aerated_concrete_rockwool):
    aerated_concrete_rockwool[index]['R-value'] = round(1/23+ 1/8.7 + element["aerated_concrete_thickness"]*10**-3/aerated_concrete["thermal_conductivity"] + element["insulator_rockwool_thickness"]*10**-3/insulator_rockwool["thermal_conductivity"], 2)
    aerated_concrete_rockwool[index]['mass'] = round(element["aerated_concrete_thickness"]*10**-3*aerated_concrete["density"] + element["insulator_rockwool_thickness"]*10**-3*insulator_rockwool["density"], 2)
    aerated_concrete_rockwool[index]['cost'] = round(element["aerated_concrete_thickness"]*10**-3*aerated_concrete["cost"] + element["insulator_rockwool_thickness"]*10**-3*insulator_rockwool["cost"], 2)

for index, element in enumerate(aerated_concrete_EPS):
    aerated_concrete_EPS[index]['R-value'] = round(1/23+ 1/8.7 + element["aerated_concrete_thickness"]*10**-3/aerated_concrete["thermal_conductivity"] + element["insulator_EPS_thickness"]*10**-3/insulator_EPS["thermal_conductivity"], 2)
    aerated_concrete_EPS[index]['mass'] = round(element["aerated_concrete_thickness"]*10**-3*aerated_concrete["density"] + element["insulator_EPS_thickness"]*10**-3*insulator_EPS["density"], 2)
    aerated_concrete_EPS[index]['cost'] = round(element["aerated_concrete_thickness"]*10**-3*aerated_concrete["cost"] + element["insulator_EPS_thickness"]*10**-3*insulator_EPS["cost"], 2)

for index, element in enumerate(hempcrete_rockwool):
    hempcrete_rockwool[index]['R-value'] = round(1/23+ 1/8.7 + element["hempcrete_thickness"]*10**-3/hempcrete["thermal_conductivity"] + element["insulator_rockwool_thickness"]*10**-3/insulator_rockwool["thermal_conductivity"], 2)
    hempcrete_rockwool[index]['mass'] = round(element["hempcrete_thickness"]*10**-3*hempcrete["density"] + element["insulator_rockwool_thickness"]*10**-3*insulator_rockwool["density"], 2)
    hempcrete_rockwool[index]['cost'] = round(element["hempcrete_thickness"]*10**-3*hempcrete["cost"] + element["insulator_rockwool_thickness"]*10**-3*insulator_rockwool["cost"], 2)

for index, element in enumerate(hempcrete_EPS):
    hempcrete_EPS[index]['R-value'] = round(1/23+ 1/8.7 + element["hempcrete_thickness"]*10**-3/hempcrete["thermal_conductivity"] + element["insulator_EPS_thickness"]*10**-3/insulator_EPS["thermal_conductivity"], 2)
    hempcrete_EPS[index]['mass'] = round(element["hempcrete_thickness"]*10**-3*hempcrete["density"] + element["insulator_EPS_thickness"]*10**-3*insulator_EPS["density"], 2)
    hempcrete_EPS[index]['cost'] = round(element["hempcrete_thickness"]*10**-3*hempcrete["cost"] + element["insulator_EPS_thickness"]*10**-3*insulator_EPS["cost"], 2)

# Obtaining the list of assemblies that meet the requierements of thermal resistance (R-value):
brick_rockwool_meet = []
for i in brick_rockwool:
    if i['R-value'] >= 3.3:
        brick_rockwool_meet.append(i)
    else:
        pass

brick_EPS_meet = []
for i in brick_EPS:
    if i['R-value'] >= 3.3:
        brick_EPS_meet.append(i)
    else:
        pass

aerated_concrete_rockwool_meet = []
for i in aerated_concrete_rockwool:
    if i['R-value'] >= 3.3:
        aerated_concrete_rockwool_meet.append(i)
    else:
        pass
    
aerated_concrete_EPS_meet = []
for i in aerated_concrete_EPS:
    if i['R-value'] >= 3.3:
        aerated_concrete_EPS_meet.append(i)
    else:
        pass

hempcrete_rockwool_meet = []
for i in hempcrete_rockwool:
    if i['R-value'] >= 3.3:
        hempcrete_rockwool_meet.append(i)
    else:
        pass
    
hempcrete_EPS_meet = []
for i in hempcrete_EPS:
    if i['R-value'] >= 3.3:
        hempcrete_EPS_meet.append(i)
    else:
        pass
# Obtaining the the R-value (thermal resistance value), mass and cost values for materials, that meet requierements:  
aerated_concrete_meet = []
for thickness in aerated_concrete["thickness"]:
    if 1/23+ 1/8.7 + thickness*10**-3/aerated_concrete["thermal_conductivity"] >= 3.3:
        aerated_concrete_meet.append({"aerated_concrete_thickness":thickness,"insulator_thickness":0,'R-value':round((1/23+ 1/8.7 + thickness*10**-3/aerated_concrete["thermal_conductivity"]),2), 'mass':round((thickness*10**-3*aerated_concrete["density"]),2), 'cost': round((thickness*10**-3*aerated_concrete["cost"]),2)})
    else:
        pass

hempcrete_meet = []
for thickness in hempcrete["thickness"]:
    if 1/23+ 1/8.7 + thickness*10**-3/hempcrete["thermal_conductivity"] >= 3.3:
        hempcrete_meet.append({"hempcrete_thickness":thickness,"insulator_thickness":0,'R-value':round((1/23+ 1/8.7 + thickness*10**-3/hempcrete["thermal_conductivity"]),2), 'mass':round((thickness*10**-3*hempcrete["density"]),2), 'cost': round((thickness*10**-3*hempcrete["cost"]),2)})
    else:
        pass

# Aggregating the meterials and assemblies which meet requierements into one list:
general_meet = list(aerated_concrete_meet) + list(hempcrete_meet) + list(brick_rockwool_meet)+ list(brick_EPS_meet)+ list(aerated_concrete_rockwool_meet) + list(aerated_concrete_EPS_meet)+ list(hempcrete_rockwool_meet) + list(hempcrete_EPS_meet)
general_meet_total = list(brick) + list(aerated_concrete) + list(hempcrete) + list(brick_rockwool)+ list(brick_EPS)+ list(aerated_concrete_rockwool) + list(aerated_concrete_EPS)+ list(hempcrete_rockwool) + list(hempcrete_EPS)
# Assigning the weight coefficient for the compared criteria
# Due to the fact that we have multicriteria analysis task, we should to unit all the criteria to one, 
# to be able make an "correct" alternatives comparison for choosing the best one.
# For such operation one of the possibilities is to make an additive convolution of criteria
#  Let's assump that every criterion has the same importance value.So to handle the different units of criteria we'll normalize them firstly.
# The best choice wiil be the max value of complex criteria:

# Calculus of the min/max values for objective function:
general_meet_norm = general_meet
min_R = min(i['R-value'] for i in general_meet_norm)
max_R = max(i['R-value'] for i in general_meet_norm)

min_cost = min(i['cost'] for i in general_meet_norm)
max_cost = max(i['cost'] for i in general_meet_norm)

min_mass = min(i['mass'] for i in general_meet_norm)
max_mass = max(i['mass'] for i in general_meet_norm)

min_u = min(1/i['R-value'] for i in general_meet_norm)
max_u = max(1/i['R-value'] for i in general_meet_norm)


# Calculating the normalized values of R-value , mass and cost in the new list:
for i in general_meet_norm:
#     i["R-value"] = round((i["R-value"] - min_R)/(max_R - min_R),3)
    i["u-value"] = round((max_u-1/i["R-value"])/(max_u - min_u),3)
    i["mass"] = round((max_mass - i["mass"])/(max_mass - min_mass),3)
    i["cost"] = round((max_cost - i["cost"])/(max_cost - min_cost),3)
    
# Adding the complex criteria which equal to the sum of R-value, mass and cost criterion to the list of normalized values:
for index, element in enumerate(general_meet_norm):
    general_meet_norm[index]["Complex_index"] = round((element["u-value"] + element["mass"] + element["cost"]),3)

# Best and worst assemblies, accordind to the choosen  complex criteria:
for i in general_meet_norm: 
    if i["Complex_index"] == min(i["Complex_index"] for i in general_meet_norm):
        print("The worst choice according to the considered criteria is ", (i))
    elif i["Complex_index"] == max(i["Complex_index"] for i in general_meet_norm):
        print("The best choice according to the considered criteria is ", (i))
    else:
        pass
# # First 10 assemblies
# best_ten = []
# while len (best_ten) < 10:
#     best_ten.append(i for max(i["Complex_index"]) in general_meet_norm)
# list(best_ten)
#list(general_meet_norm)
